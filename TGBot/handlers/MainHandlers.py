from aiogram.filters import CommandStart,Command
from aiogram.fsm.context import FSMContext
from aiogram import Router,F
from aiogram.types import Message, CallbackQuery,FSInputFile,LabeledPrice, PreCheckoutQuery
from aiogram import types 
from aiogram.enums.parse_mode import ParseMode
import States as STS 
from keyboards.MainKeyboards import MainReplyKeyboard,btn_for_answer_gpt,Btn_for_Photo,btn_BayChatGPT_StartMenu,Btn_BayTokensOrChatGPT_Menu,Btn_My_Account,btnSelectSub
import Config as CFG
import aiohttp
from database.database import add_answer_gpt,get_answer_gpt,clear_context,add_last_promt_generate_photo,get_last_promt_generate_photo,BayGPT,Have_subscription,Reduce_Tokens,inicialize_sub,GetInfoForAccunt
import g4f
from g4f.client import Client
import time

from translate import Translator
import asyncio
from asyncio import WindowsSelectorEventLoopPolicy

asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())
router = Router()
client = Client()

Models_Image = [
    'flux-anime', # 18+ 10/10 –ï–°–¢–¨ –í–û–î–Ø–ù–û–ô –ó–ù–ê–ö
    'flux-realism', # 18+ 10/10 –ï–°–¢–¨ –í–û–î–Ø–ù–û–ô –ó–ù–ê–ö
    'flux-4o', # –ù–µ—Ç –∑–Ω–∞–∫–∞. 8/10
]

############################################
#                   Let's Go!              #
############################################


@router.message(CommandStart())
async def cmd_start(msg:Message):
    inicialize_sub(msg.chat.id)
    await msg.answer("""–Ø - –°–∞–ª–∞—Ç –±–æ—Ç.
–ß—Ç–æ —è —É–º–µ—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç? 
‚úÖChatGPT-4o : /GPT
‚úÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ : /GenerateImage
‚úÖ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: /Shop

""",reply_markup=Btn_My_Account)
    
############################################
#           Handlers message/Command       #
############################################
@router.message(F.text == 'Shop')
@router.message(Command('Shop'))
async def Shop(message:Message):
    await message.answer('......',reply_markup=btnSelectSub)

@router.message(Command('Stop'))
async def cmd_stop(message: Message, state:FSMContext):
    await state.clear()

@router.callback_query(F.data == 'Bay_ChatGPT_start_menu')
async def Bay_ChatGptStart_Menu(callback:CallbackQuery):
    await callback.message.answer("""–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º —É—Å–ª—É–≥—É:
<b><i>
–•–ò–¢–´ –ü–†–û–î–ê–ñ : 
‚Äî ChatGPT + 300 –¢–æ–∫–µ–Ω–æ–≤ | –í—Å–µ–≥–æ 350 —Ä.
‚Äî 1000 —Ç–æ–∫–µ–Ω–æ–≤ | –í—Å–µ–≥–æ 500 —Ä.
</i></b>
–í—Å–µ —É—Å–ª—É–≥–∏: 

‚Ä¢ ChatGPT | 185 —Ä.
‚Ä¢ ChatGPT + 100 –¢–æ–∫–µ–Ω–æ–≤ | 200 —Ä.

‚Ä¢ 10 —Ç–æ–∫–µ–Ω–æ–≤ | 25 —Ä. 
‚Ä¢ 25 —Ç–æ–∫–µ–Ω–æ–≤ | 50 p. 
‚Ä¢ 50 —Ç–æ–∫–µ–Ω–æ–≤ | 75 p.
‚Ä¢ 100 —Ç–æ–∫–µ–Ω–æ–≤  | 100 p.""",reply_markup=Btn_BayTokensOrChatGPT_Menu, parse_mode="html")
    
@router.message(Command('GPT'))
@router.message(F.text == "GPT")
async def greet_user(message: Message,state: FSMContext):
    inicialize_sub(message.chat.id)
    IsHaveSubGpt = Have_subscription(message.chat.id, 'GPT')
    await message.answer(f'ID: {message.chat.id}')
    if IsHaveSubGpt != None or str(message.chat.id) == CFG.admin_id:
        if IsHaveSubGpt == True or str(message.chat.id) == CFG.admin_id:
            await message.answer('ChatGPT –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞')
            await state.set_state(STS.ChatGPT.Prompt)
        else:
            await message.answer('–£-–ø—Å.. –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ChatGPTüò¢.\n–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ—ë?',reply_markup=btn_BayChatGPT_StartMenu)


@router.message(F.text == '–ü–æ–º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º')
async def ClearState(message: Message,state:FSMContext):
    await state.clear()
    await message.answer('–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞üåÄ')
    
@router.callback_query(F.data == 'StopNeiro')
async def ClearState(callback:CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('–ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞üåÄ')

@router.message(F.text == 'üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ')
@router.message(Command('GenerateImage'))
async def get_prompt_generate_image(message:Message,state:FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\nP.s: –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ª—É—á—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.')
    await state.set_state(STS.Image.SendImage)

@router.callback_query(F.data == 'ClearContext')
async def ClearContext(callback:CallbackQuery):
    answer = clear_context(callback.message.chat.id)
    if answer == True:
        await callback.message.answer("Code: –£—Å–ø–µ—à–Ω–æ! \n–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω.")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –ø–æ–∫–∞ —á—Ç–æ –∏–ª–∏ –≤—ã –Ω–µ–¥–∞–≤–Ω–æ –µ–≥–æ –æ—Ç—á–∏—â–∞–ª–∏..")

@router.callback_query(F.data == 'AgainPrompt')
async def AgainPrompt(callback: CallbackQuery):
    Content = get_last_promt_generate_photo(callback.message.chat.id)
    await callback.message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ—á–µ—Ä–µ–¥—å. –æ–∂–∏–¥–∞–π—Ç–µ.')
    Content = Translete_Prompt(Content)
    response = await client.images.async_generate(
        model="flux",
        prompt=Content,
        response_format="url"
    )
    if response:
        image_url = response.data[0].url
        print(image_url)

        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    await CFG.bot.send_photo(chat_id=callback.message.chat.id, photo=image_url,caption='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å',reply_markup=Btn_for_Photo)

@router.callback_query(F.data == 'MyAccount')
async def MyAccount(callback: CallbackQuery):
    account_info = GetInfoForAccunt(callback.message.chat.id)
    
    if account_info is not None:
        Tokens, Gpt, Photo = account_info
        
        msg = f"""
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ãüíé  |   {Tokens}

–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ChatGPT |   {'‚úÖ' if Gpt == 1 else "‚ùå"}

–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ—Ç–æ | {'‚úÖ' if Photo == 1 else "‚ùå"}
"""
        await callback.message.answer(msg, reply_markup=Btn_BayTokensOrChatGPT_Menu)
    else:
        await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



@router.callback_query(F.data == 'Bay_Photo_start_menu')
async def BayPhoto(callback:CallbackQuery):
    await callback.message.answer('–ü–æ–∫—É–ø–∫ Photo')
############################################
#                  States                  #
############################################


@router.message(STS.ChatGPT.Prompt)
async def generateAnswerGPT(message: Message, state: FSMContext):
    Tokens = Reduce_Tokens(message.chat.id)
    time.sleep(1.5)
    if Tokens != None or str(message.chat.id) == CFG.admin_id:
        if Tokens[0] !=False or str(message.chat.id) == CFG.admin_id:
            prompt = message.text
            # if prompt.startswith('!'):
            Description = await message.answer('ChatGPT-4o –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...')
            Context = get_answer_gpt(message.chat.id)
            if Context != None:
                promptForGPT = f'–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º –¥–∏–∞–ª–æ–≥–æ–º –∏ –æ—Ç–≤–µ—á–∞–π –∏–∑—Ö–æ–¥—è –∏–∑ –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {Context}. –ò –º–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –±—ã–ª: {prompt}'
                response = g4f.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": promptForGPT}],)
            else:
                response = g4f.ChatCompletion.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                ) 
            if response:
                try: 
                    await CFG.bot.delete_message(chat_id=message.chat.id, message_id=Description.message_id)
                    await message.reply(response,reply_markup=btn_for_answer_gpt)
                    add_answer_gpt(message.chat.id, response, prompt)
                except:
                    await CFG.bot.delete_message(chat_id=message.chat.id, message_id=Description.message_id)
                    await message.reply('–£–ø—Å.. –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.',reply_markup=btn_for_answer_gpt)
        else:
            if Tokens[1] == 'Not enough tokens':
                await message.answer('–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã...  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç',reply_markup=Btn_My_Account)
            elif Tokens[1] == 'Not Have GPT':
                await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT')

@router.message(STS.Image.SendImage)
async def generate_image(message: Message, state: FSMContext):
    Content = str(message.text)
    await message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤ –æ—á–µ—Ä–µ–¥—å. –æ–∂–∏–¥–∞–π—Ç–µ.')
    Content = Translete_Prompt(Content)
    add_last_promt_generate_photo(message.chat.id, Content)
    response = await client.images.async_generate(
        model="flux",
        prompt=Content,
        response_format="url"
    )
    if response:
        image_url = response.data[0].url
        print(image_url)

        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    await CFG.bot.send_photo(chat_id=message.chat.id, photo=image_url,caption='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å',reply_markup=Btn_for_Photo)


############################################
#                   functions              #
############################################


def Translete_Prompt(prompt):
        translator = Translator(from_lang='ru', to_lang='en')
        translated_text = translator.translate(prompt)
        return translated_text

@router.callback_query(F.data == 'BayChatGPT')
async def order(callback:CallbackQuery, bot:CFG.Bot):
    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ChatGPT',
        description='–î–æ—Å—Ç—É–ø –∫ ChatGPT',
        payload='BayChatGPT',
        provider_token='381764678:TEST:109578',
        currency='rub',
        prices=[
            LabeledPrice(
                label = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ChatGPT',
                amount=100*100
            )
        ]
    )

@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery) -> None:
    await pre_checkout_q.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: types.Message) -> None:
    Answer = BayGPT(message.chat.id)
    print('–í—ã–∑–≤–∞–ª—Å—è BayGPT')
    if Answer != None:
        if Answer == True:
            print('–í—ã–∑–≤–∞–ª—Å—è BayGPT –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª True')
            await message.answer('–ì–æ—Ç–æ–≤–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')